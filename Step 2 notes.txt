STEP 1
1. Could not resist simple rename refactorings while adding UTs. Good habit, right?
2. The classes I previously refactored out weeks ago - those were the easiest ones to UT. And the first canidate. 
	And yes - they were missing UTs. One class really: RawScore. That was the only extracted class that I wrote some new/dedicated UTs. And now more now.
3. TennisGame tests added. 
	Discovered a few good missed cases (same player name, unknown player, invalid/empty/null player name).
	Added UTs & validation for player names passed in to the constructor & to the methods. 
	Realizing this is a candidate to decouple into Player class: would mean the validation could move there. Didn't see value in that before, bu tnow I do. Essentially WholeValue pattern. 
4. DisplayScore - UTs for validation, then for rendering, covered one missing case I couldn't get to before (unknown score).
	Had to enable passing in an array of rules into the DisplayScore.Render() so that I can pass in test rules.
5. Testing of individual rules - was unable to do that directly as they were all hidden as private methods. 
	Realized sets of rules can be independent of the DisplayScore class -> decoupled. Into static methods in a TennisScoreNaming class. Didn't see reason to create multiple classes.
	Added UTs for each tennis score naming.

Per instructions turned off the original tests now. And checked NCrunch metrics: showed 100% product code coverage. With 37 new tests (original had 36 tests).
	A bit surprised about the coverage, but I guess I was thinking about each unit how to test it best when I was generating the UTs.

STEP 2
